// Generated by CoffeeScript 1.7.1
(function() {
  var expand, expandComponent, getExecution, getExecutionDeprecated, getFormattedTime, getLastExecution, getLastExecutionDeprecated, isInt, print, readyFn, __createDiagram, __getJsDate, __prepareSamples, __replaceRaute;

  readyFn = function(jQuery) {
    console.log("Ready.");
    $("[data-toggle=offcanvas]").click(function() {
      console.log("Click on button ");
      $(".row-offcanvas").toggleClass("active");
    });
    getLastExecution().done(expand);
  };

  expand = function(execution) {
    var c, row_1, row_2, row_3, _i, _len, _ref;
    execution.formattedTime = getFormattedTime(execution.timestamp);
    row_1 = $('<div class="row"></div>').appendTo('#execution');
    $('<div class="col-md-4"/>').appendTo(row_1).text("Execution date:");
    $('<div class="col-md-8"/>').appendTo(row_1).text(execution.formattedTime);
    row_2 = $('<div class="row"></div>').appendTo('#execution');
    $('<div class="col-md-4"/>').appendTo(row_2).text("Turnaround time:");
    $('<div class="col-md-8"/>').appendTo(row_2).text(execution.turnaround);
    row_3 = $('<div class="row"></div>').appendTo('#execution');
    $('<div class="col-md-4"/>').appendTo(row_3).text("Number of Components:");
    $('<div class="col-md-8"/>').appendTo(row_3).text(execution.components.length);
    row_3 = $('<br>').appendTo('#execution');
    _ref = execution.components;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      expandComponent(c);
    }
  };

  expandComponent = function(component) {
    var panel;
    panel = $('<div class="panel panel-primary"></div>').appendTo('#execution');
    $('<div class="panel-heading"/>').appendTo(panel).text('UID: ' + component.uid);
    $('<div class="panel-body"/>').appendTo(panel).text('Type: ' + component.type);
    $('<div/>').appendTo(panel).attr('id', __replaceRaute(component.uid));
    __createDiagram(component);
  };

  __createDiagram = function(component) {
    console.log("Info: Creating compnent diagram for " + component.uid);
    return nv.addGraph(function() {
      var chart, data, selector;
      console.dir(component);
      chart = nv.models.lineChart().margin({
        left: 20
      }).useInteractiveGuideline(true).transitionDuration(350).showLegend(true).showYAxis(true).showXAxis(true);
      chart.xAxis.axisLabel("Samples").tickFormat(d3.format(",r"));
      chart.yAxis.axisLabel("Amplitude").tickFormat(d3.format(".02f"));
      selector = __replaceRaute(component.uid);
      selector = '#' + selector;
      console.log("DEBUG:");
      data = __prepareSamples(component.input_samples[0].values);
      console.dir(data);
      d3.select(selector).append('svg').datum(data).call(chart);
      return chart;
    });
  };

  __prepareSamples = function(samples) {
    var data, i, sample, _i, _len;
    data = [];
    for (i = _i = 0, _len = samples.length; _i < _len; i = ++_i) {
      sample = samples[i];
      data.push({
        x: i,
        y: sample
      });
    }
    return [
      {
        values: data,
        key: 'Wave'
      }
    ];
  };

  __replaceRaute = function(text) {
    return text.replace(/#/g, '_');
  };

  getLastExecution = function() {
    return $.ajax({
      url: '/execution/latest',
      type: "GET"
    });
  };

  getExecution = function(timestamp) {
    if (isInt(timestamp)) {
      return $.ajax({
        url: '/execution/' + timestamp,
        type: "GET"
      });
    }
  };

  getLastExecutionDeprecated = function() {
    $.get("execution/latest", function(data, status) {
      console.log(status);
      console.dir(data);
    });
  };

  getExecutionDeprecated = function(timestamp) {
    if (isInt(timestamp)) {
      $.get("execution/" + timestamp, function(data, status) {
        console.log(status);
        console.dir(data);
      });
    } else {
      console.log(timestamp + " is not a number.");
    }
  };

  print = function(data) {
    return console.dir(data);
  };

  isInt = function(number) {
    return typeof n === 'number' && n % 1 === 0;
  };

  getFormattedTime = function(x) {
    var date, datum, hours, minutes, month, seconds, year;
    date = __getJsDate(x);
    year = date.getFullYear();
    month = date.getMonth();
    datum = date.getDate();
    hours = date.getHours();
    minutes = date.getMinutes();
    seconds = date.getSeconds();
    return datum + '.' + month + '.' + year + ' ' + hours + ':' + minutes + ':' + seconds;
  };

  __getJsDate = function(x) {
    var date;
    date = new Date(x * 1000);
    return date;
  };

  $(document).ready(readyFn);

}).call(this);
