// Generated by CoffeeScript 1.7.1
(function() {
  var expand, expandComponent, generateTestdata, getComponentList, getExecution, getExecutionList, getFormattedTime, getLastExecution, getSamples, global_component_charts, global_components, global_timestamp, initComponentNavigation, initExecutionNavigation, initializeButtons, initializeDocument, isInt, print, readyFn, removeEveryExecution, removeExecution, __addSampleInformation, __calcAverageExecutionTime, __calcAverageExecutionTimeList, __calcTypeImplementationDistribution, __createBrush, __createDiagram, __getJsDate, __prepareSamples, __replaceRaute;

  global_timestamp = 0;

  global_components = null;

  global_component_charts = null;

  readyFn = function(jQuery) {
    console.log("Ready.");
    initializeDocument();
    initializeButtons();
  };

  initializeDocument = function() {
    $("[data-clampedwidth]").each(function() {
      var elem, parentPanel, resizeFn;
      elem = $(this);
      parentPanel = elem.data("clampedwidth");
      console.dir(parentPanel);
      resizeFn = function() {
        var sideBarNavWidth;
        sideBarNavWidth = $(parentPanel).width();
        elem.css("width", sideBarNavWidth);
      };
      resizeFn();
      $(window).resize(resizeFn);
    });
    $("#component_average_execution").parent().parent().css("margin-left", "0px");
    $(window).scroll(function() {
      $(".hideme").each(function(i) {
        var bottom_of_object, bottom_of_window, offset, top_of_window;
        bottom_of_object = $(this).position().top + $(this).outerHeight();
        bottom_of_window = $(window).scrollTop() + $(window).height();
        top_of_window = $(window).scrollTop() - $(window).height();
        offset = 150;
        if (bottom_of_window > bottom_of_object - offset) {
          $(this).animate({
            opacity: "1"
          }, 500);
        }
      });
    });
    getExecutionList().done(initExecutionNavigation);
    return getLastExecution().done(expand);
  };

  initExecutionNavigation = function(executions) {
    var el, exec, li, nav, _i, _len, _results;
    nav = $("#nav_executions").empty();
    $('<li class="nav-header">').appendTo(nav).text("Executions");
    if (executions != null) {
      _results = [];
      for (_i = 0, _len = executions.length; _i < _len; _i++) {
        exec = executions[_i];
        exec.formattedTime = getFormattedTime(exec.timestamp);
        li = $('<li>').appendTo(nav);
        el = $('<a>').hide().appendTo(li).text(exec.formattedTime).data("timestamp", exec.timestamp).fadeIn("fast");
        _results.push(el.click(function() {
          var timestamp;
          $('html, body').animate({
            scrollTop: 0
          }, 'slow');
          timestamp = $(this).data("timestamp");
          getExecution(timestamp).done(expand);
        }));
      }
      return _results;
    } else {
      li = $('<li>').appendTo(nav);
      return el = $('<a>').hide().appendTo(li).text("No data").fadeIn("fast");
    }
  };

  initComponentNavigation = function(components) {
    var c, el, li, nav, _i, _len, _results;
    global_components = components;
    nav = $("#nav_components").empty();
    $('<li class="nav-header">').appendTo(nav).text("Components");
    _results = [];
    for (_i = 0, _len = components.length; _i < _len; _i++) {
      c = components[_i];
      li = $('<li>').appendTo(nav);
      el = $('<a>').hide().appendTo(li).text(c.uid).fadeIn("fast");
      _results.push(li.click(function() {
        var target;
        target = '#' + __replaceRaute($(this).children('a').text());
        console.log("Scrolling to " + target);
        return $("html, body").animate({
          scrollTop: $(target).position().top
        }, "slow");
      }));
    }
    return _results;
  };

  initializeButtons = function() {
    $("#home").click(function() {
      $('html, body').animate({
        scrollTop: 0
      }, 'slow');
      return false;
    });
    $("#refresh_test").click(function() {
      return getExecutionList().done(function(executions) {
        return initExecutionNavigation(executions);
      });
    });
    $("#generate_test").click(function() {
      return generateTestdata().done(function() {
        return getExecutionList().done(function(executions) {
          return initExecutionNavigation(executions);
        });
      });
    });
    $("#remove_test").click(function() {
      return removeEveryExecution().done(function() {
        return initExecutionNavigation(null);
      });
    });
  };

  expand = function(execution) {
    var c, expand_addAverageExuction, expand_addComponentCount, expand_addDate, expand_addImplementationDistribution, expand_addTurnaround, expand_clean, _i, _len, _ref;
    expand_clean = function() {
      console.log("Cleaning.");
      $("#execution_date").fadeOut("fast").empty();
      $("#component_count").fadeOut("fast").empty();
      $("#turnaround").fadeOut("fast").empty();
      $("#component_implementations").fadeOut("fast").empty();
      $("#component_average_execution").fadeOut("fast").empty();
      $("#execution").fadeOut("fast").empty();
      global_component_charts = [];
    };
    expand_addDate = function(execution) {
      var date, div, _getDate, _getHour;
      date = __getJsDate(execution.timestamp);
      _getHour = function(d) {
        return d.getHours() + ":" + d.getMinutes();
      };
      _getDate = function(d) {
        var monthNames;
        monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        return d.getDate() + '/' + monthNames[d.getMonth()] + '/' + d.getFullYear();
      };
      div = $('#execution_date').fadeIn("fast");
      $('<br/>').appendTo(div);
      $('<h1 class="text-right"/>').text(_getHour(date)).css("font-weight", "Bold").appendTo(div);
      $('<p class="text-right"/>').text(_getDate(date)).appendTo(div);
    };
    expand_addComponentCount = function(execution) {
      var count, div;
      count = execution.components.length;
      div = $('#component_count').fadeIn("fast");
      $('<br/>').appendTo(div);
      $('<h1/>').text('#' + count).css("font-weight", "Bold").appendTo(div);
      $('<p/>').text('have been found').appendTo(div);
    };
    expand_addTurnaround = function(execution) {
      var c, div, turn, _i, _len, _ref;
      turn = 0;
      _ref = execution.components;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        turn = turn + __calcAverageExecutionTime(c.execution_times);
      }
      turn = turn.toFixed(2);
      div = $('#turnaround').fadeIn("fast");
      $('<br/>').appendTo(div);
      $('<h1/>').html(turn + ' &micros').css("font-weight", "Bold").appendTo(div);
      $('<p/>').text('does it take for one cycle').appendTo(div);
    };
    expand_addImplementationDistribution = function(execution) {
      $("#component_implementations").fadeIn("fast");
      nv.addGraph(function() {
        var data, div, pie;
        pie = nv.models.pieChart().x(function(d) {
          return d.label;
        }).y(function(d) {
          return d.value;
        }).showLabels(false).labelThreshold(.05).labelType("percent").donut(true).donutRatio(0.5).color(['steelblue', 'lightgreen']);
        data = __calcTypeImplementationDistribution(execution.components);
        div = '#component_implementations';
        d3.select(div).append('svg').datum(data).transition().duration(350).call(pie);
        return pie;
      });
    };
    expand_addAverageExuction = function() {
      $("#component_average_execution").fadeIn("fast");
      nv.addGraph(function() {
        var bar, data, div;
        bar = nv.models.discreteBarChart().x(function(d) {
          return d.label;
        }).y(function(d) {
          return d.value;
        }).staggerLabels(true).tooltips(true).showValues(true).transitionDuration(350);
        div = '#component_average_execution';
        data = __calcAverageExecutionTimeList(execution.components);
        d3.select(div).append('svg').attr('height', 200).datum(data).transition().duration(350).call(bar);
        return bar;
      });
    };
    global_timestamp = execution.timestamp;
    getComponentList(execution.timestamp).done(initComponentNavigation);
    expand_clean();
    expand_addDate(execution);
    expand_addComponentCount(execution);
    expand_addImplementationDistribution(execution);
    expand_addTurnaround(execution);
    expand_addAverageExuction(execution);
    _ref = execution.components;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      expandComponent(c);
    }
  };

  expandComponent = function(component) {
    var avgtime, body, card, div, row, table, tbody, td, title, tr;
    div = $("#execution").fadeIn("fast");
    row = $('<div class="span12"/>').addClass("hideme").attr("id", __replaceRaute(component.uid)).css("margin-left", "0px").appendTo(div);
    card = $('<div class="card"/>').appendTo(row);
    title = $('<h2 class="card-heading"/>').appendTo(card).text('UID: ' + component.uid);
    body = $('<div class="card-body"/>').appendTo(card);
    table = $("<table>");
    table.addClass("table table-condensed table-hover table-striped").appendTo(body);
    tbody = $("<tbody>");
    tbody.appendTo(table);
    tr = $("<tr>");
    tr.appendTo(tbody);
    td = $("<td>");
    td.appendTo(tr).addClass("span3").text('Implementation type:');
    td = $("<td>");
    td.appendTo(tr).addClass("span9").text(component.type);
    tr = $("<tr>");
    tr.appendTo(tbody);
    td = $('<td>');
    td.appendTo(tr).addClass("span3").text('Average execution time:');
    avgtime = __calcAverageExecutionTime(component.execution_times);
    avgtime = avgtime.toFixed(2);
    td = $('<td>');
    td.appendTo(tr).addClass("span9").html(avgtime + ' &micros');
    __addSampleInformation(component, tbody);
    $('<div/>').appendTo(body).attr('id', __replaceRaute(component.uid) + "_graphic");
    $('<div/>').appendTo(body).attr('id', __replaceRaute(component.uid) + "_brush");
    if ((component.input_samples[0] != null) || (component.output_samples[0] != null)) {
      __createDiagram(component);
      __createBrush(component);
    }
  };

  __addSampleInformation = function(component, tbody) {
    var i, input, output, samples, td, title, tr, _i, _j, _len, _len1, _ref, _ref1;
    _ref = component.input_samples;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      input = _ref[i];
      tr = $("<tr>");
      tr.appendTo(tbody);
      td = $("<td>");
      title = "Input samples port #" + i + ":";
      samples = input.values.length;
      td.appendTo(tr).addClass("span3").text(title);
      td = $("<td>");
      td.appendTo(tr).addClass("span9").text(samples);
    }
    _ref1 = component.output_samples;
    for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
      output = _ref1[i];
      tr = $("<tr>");
      tr.appendTo(tbody);
      td = $("<td>");
      title = "Output samples port #" + i + ":";
      samples = output.values.length;
      td.appendTo(tr).addClass("span3").text(title);
      td = $("<td>");
      td.appendTo(tr).addClass("span9").text(samples);
    }
  };

  __calcTypeImplementationDistribution = function(components) {
    var c, hw, hw_percentage, result, sw, sw_components, sw_percentage, _i, _len;
    result = [];
    sw_components = 0;
    for (_i = 0, _len = components.length; _i < _len; _i++) {
      c = components[_i];
      if (c.type === 'SW' || c.type === 'sw' || c.type === 'Sw') {
        sw_components += 1;
      }
    }
    sw_percentage = sw_components > 0 ? sw_components * 100 / components.length : 0;
    sw_percentage = Math.floor(sw_percentage);
    hw_percentage = 100 - sw_percentage;
    sw = {
      label: "SW",
      value: sw_percentage
    };
    result.push(sw);
    hw = {
      label: "HW",
      value: hw_percentage
    };
    result.push(hw);
    return result;
  };

  __calcAverageExecutionTime = function(execution_times) {
    var result, time, _i, _len;
    if (execution_times.length === 0) {
      return "No data available";
    }
    result = 0;
    for (_i = 0, _len = execution_times.length; _i < _len; _i++) {
      time = execution_times[_i];
      result = result + time;
    }
    return result / execution_times.length;
  };

  __calcAverageExecutionTimeList = function(components) {
    var c, data, result, _i, _len;
    result = [
      {
        key: "Average Execution Time",
        values: []
      }
    ];
    for (_i = 0, _len = components.length; _i < _len; _i++) {
      c = components[_i];
      data = {
        label: __replaceRaute(c.uid),
        value: __calcAverageExecutionTime(c.execution_times)
      };
      result[0].values.push(data);
    }
    return result;
  };

  __createDiagram = function(component) {
    var draw_samples;
    console.log("Info: Creating compnent diagram for " + component.uid);
    draw_samples = __prepareSamples(component);
    return nv.addGraph(function() {
      var chart, global_chart, selector;
      chart = nv.models.lineChart().margin({
        left: 20
      }).useInteractiveGuideline(true).transitionDuration(350).showLegend(true).showYAxis(true).showXAxis(true);
      chart.xAxis.axisLabel("Samples").tickFormat(d3.format(",r"));
      chart.yAxis.axisLabel("Amplitude").tickFormat(d3.format(",.2f"));
      selector = __replaceRaute(component.uid);
      selector = '#' + selector + '_graphic';
      d3.select(selector).append('svg').datum(draw_samples).call(chart);
      nv.utils.windowResize(chart.update);
      nv.utils.windowResize(function() {
        chart.update();
      });
      global_chart = {
        "uid": component.uid,
        "chart": chart
      };
      global_component_charts.push(global_chart);
      return chart;
    });
  };

  __createBrush = function(component) {
    var area, brush, brushed, context, draw_data, e, height, i, length, selector, svg, values, width, xAxis, x_domain, x_scale, y_domain, y_scale, __getChart;
    selector = __replaceRaute(component.uid);
    selector = '#' + selector + '_brush';
    width = $(selector).parent().css("width");
    width = parseInt(width, 10);
    height = 60;
    values = component.output_samples[0].values;
    length = values.length;
    draw_data = {
      x: (function() {
        var _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = values.length; _i < _len; i = ++_i) {
          e = values[i];
          _results.push(i);
        }
        return _results;
      })(),
      y: (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          e = values[_i];
          _results.push(e);
        }
        return _results;
      })()
    };
    x_domain = [0, length];
    y_domain = d3.extent(draw_data.y.map(function(d) {
      return d;
    }));
    x_scale = d3.scale.linear().range([0, width]).domain(x_domain).clamp(true);
    y_scale = d3.scale.linear().range([height, 0]).domain(y_domain).clamp(true);
    xAxis = d3.svg.axis().scale(x_scale).orient("bottom");
    __getChart = function(component) {
      var c, _i, _len;
      for (_i = 0, _len = global_component_charts.length; _i < _len; _i++) {
        c = global_component_charts[_i];
        if (c.uid = component.uid) {
          return c.chart;
        }
      }
      console.log("Error: Could not find chart: " + component.uid);
      return null;
    };
    brushed = function() {
      var b, chart, end, ob, sample_amount, start;
      b = !brush.empty() ? brush.extent() : x_scale.domain();
      start = Math.floor(b[0]);
      end = Math.ceil(b[1]);
      sample_amount = end - start;
      console.log("Getting sample " + start + " to " + end);
      if (sample_amount < 1) {
        return;
      }
      chart = __getChart(component);
      ob = {
        timestamp: global_timestamp,
        uid: component.uid
      };
      $.post("/samples", ob).done(function(data) {
        console.log("Ajax Success:");
        data = __prepareSamples(data.components[0], start, end);
        console.log("CALCUTRON: ");
        console.log(data);
        selector = __replaceRaute(component.uid);
        selector = '#' + selector + '_graphic';
        $(selector).find("svg").remove();
        d3.select(selector).append("svg").datum(data).call(chart);
        return chart.update();
      });
    };
    brush = d3.svg.brush().x(x_scale).on("brushend", brushed);
    svg = d3.select(selector).append("svg").attr("width", width).attr("height", height);
    area = d3.svg.area().interpolate("linear").x(function(d) {
      console.log(x_scale(d.x));
      return x_scale(d.x);
    }).y0(height).y1(function(d) {
      console.log(y_scale(d.y));
      return y_scale(d.y);
    });
    context = svg.append("g").attr("class", "context");
    context.append("path").datum(draw_data).attr("class", "area").attr("d", area);
    context.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);
    context.append("g").attr("class", "x brush").call(brush).selectAll("rect").attr("y", -6).attr("height", height);
  };

  __prepareSamples = function(component, start, end) {
    var data, i, input_length, j, port, sample, subset, uend, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;
    if (start == null) {
      start = 0;
    }
    if (end == null) {
      end = 0;
    }
    console.log(component);
    data = [];
    input_length = component.input_samples.length;
    console.dir(component);
    _ref = component.input_samples;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      port = _ref[i];
      data.push({
        key: 'Input port ' + i,
        values: []
      });
      uend = end === 0 ? component.input_samples[i].values.length : end;
      subset = component.input_samples[i].values.slice(start, +uend + 1 || 9e9);
      console.log("INPUT SUBSET");
      console.log(subset);
      for (j = _j = 0, _len1 = subset.length; _j < _len1; j = ++_j) {
        sample = subset[j];
        data[i].values.push({
          x: j,
          y: sample
        });
      }
    }
    _ref1 = component.output_samples;
    for (i = _k = 0, _len2 = _ref1.length; _k < _len2; i = ++_k) {
      port = _ref1[i];
      data.push({
        key: 'Output port ' + i,
        values: []
      });
      uend = end === 0 ? component.output_samples[i].values.length : end;
      console.log("OUTPUT SUBSET");
      subset = component.output_samples[i].values.slice(start, +uend + 1 || 9e9);
      console.log(subset);
      for (j = _l = 0, _len3 = subset.length; _l < _len3; j = ++_l) {
        sample = subset[j];
        data[input_length + i].values.push({
          x: j,
          y: sample
        });
      }
    }
    return data;
  };

  __replaceRaute = function(text) {
    return text.replace(/#/g, '_');
  };

  getLastExecution = function() {
    return $.ajax({
      url: '/execution/latest',
      type: "GET"
    });
  };

  getComponentList = function(timestamp) {
    return $.ajax({
      url: '/componentlist/' + timestamp,
      type: "GET"
    });
  };

  getExecution = function(timestamp) {
    if (!isInt(timestamp)) {
      parseInt(timestamp);
    }
    console.log("Ajax: Retrieving Execution " + timestamp);
    return $.get('/execution/' + timestamp);
  };

  getExecutionList = function() {
    return $.ajax({
      url: '/execution/list',
      type: "GET"
    });
  };

  getSamples = function(param) {
    var processData;
    console.log("AJAX FOLLOWING-");
    processData = function(data, textStatux, jqXHR) {
      return console.log("HI was geht");
    };
    return $.post('/samples', param, processData);
  };

  generateTestdata = function() {
    return $.get('/generate', function(data) {
      console.log("AJAX: Generate Testdata Successful");
    });
  };

  removeExecution = function(timestamp) {
    if (isInt(timestamp)) {
      return $.ajax({
        url: '/remove/' + timestamp,
        type: "GET"
      });
    }
  };

  removeEveryExecution = function() {
    return $.get('/remove/all', function(data) {
      console.log("AJAX: Cleared Database");
    });
  };

  print = function(data) {
    return console.dir(data);
  };

  isInt = function(number) {
    return typeof n === 'number' && n % 1 === 0;
  };

  getFormattedTime = function(x) {
    var date, datum, hours, minutes, month, seconds, year;
    date = __getJsDate(x);
    year = date.getFullYear();
    month = date.getMonth();
    datum = date.getDate();
    hours = date.getHours();
    minutes = date.getMinutes();
    seconds = date.getSeconds();
    if (datum < 10) {
      datum = "0" + datum;
    }
    if (month < 10) {
      month = "0" + month;
    }
    if (hours < 10) {
      hours = "0" + hours;
    }
    if (minutes < 10) {
      minutes = "0" + minutes;
    }
    if (seconds < 10) {
      seconds = "0" + seconds;
    }
    return datum + '/' + month + '/' + year + ' - ' + hours + ':' + minutes + ':' + seconds;
  };

  __getJsDate = function(x) {
    var date;
    date = new Date(x * 1000);
    return date;
  };

  $(document).ready(readyFn);

}).call(this);
