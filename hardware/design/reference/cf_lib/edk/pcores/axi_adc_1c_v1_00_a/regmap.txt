// ***************************************************************************
// ***************************************************************************
// Copyright 2011(c) Analog Devices, Inc.
// 
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//     - Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     - Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in
//       the documentation and/or other materials provided with the
//       distribution.
//     - Neither the name of Analog Devices, Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//     - The use of this software may or may not infringe the patent rights
//       of one or more patent holders.  This license does not release you
//       from the requirement that you obtain separate licenses from these
//       patent holders to use this software.
//     - Use of the software either in source or binary form, must be run
//       on or directly connected to an Analog Devices Inc. component.
//    
// THIS SOFTWARE IS PROVIDED BY ANALOG DEVICES "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A
// PARTICULAR PURPOSE ARE DISCLAIMED.
//
// IN NO EVENT SHALL ANALOG DEVICES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, INTELLECTUAL PROPERTY
// RIGHTS, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR 
// BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ***************************************************************************
// ***************************************************************************
// ***************************************************************************
// ***************************************************************************
// REGISTER MAP
// ***************************************************************************
// ***************************************************************************
// ---------------------------------------------------------------------------
// Address
// QW     Byte   Bits     Description
// ---------------------------------------------------------------------------
// 0x00   0x00   [31: 0]  version[31:0]         32'h00010061  (1.0a)
// ---------------------------------------------------------------------------
// 0x03   0x0c   [16:16]  capture               Capture start (0->1)
//               [15: 0]  capture_count[15:0]   Capute count (number of quad words - 1)
//
// This register controls the capture of ADC data. A 0 to 1 transistion in the capture bit
// starts the capture. The capture count is the number of quad words minus one. To capture
// 16 quad words (64bit), sw must write 0x0_0000 followed by 0x1_000f. 
// ---------------------------------------------------------------------------
// 0x04   0x10   [ 2: 2]  dma_underflow         Underflow (W1C)
//               [ 1: 1]  dma_overflow          Overflow (W1C)
//               [ 0: 0]  dma_status            Idle (0x0) or busy (0x1) (RO)
//
// This register indicates the status of an ADC data capture. Software must clear all the
// bits before starting a data capture.
// ---------------------------------------------------------------------------
// 0x05   0x14   [ 2: 2]  adc_pnerr             PN Error (W1C)
//               [ 1: 1]  adc_pnoos             PN Out Of Sync (W1C)
//               [ 0: 0]  adc_or                Over Range (W1C)
//
// This register indicates the status of ADC data monitoring (regardless of data capture).
// These bits are set whenever a corresponding error is detected. Software must clear
// these bits and read them back to monitor the status.
// ---------------------------------------------------------------------------
// 0x06   0x18   [ 1: 0]  dmode                 Data mode
//
// This register corresponds to capture control and is device specific.
// The default (0x0) setting should be good enough for most cases.
// Usually consists of the following:
//  dmode[1]:  clock-edge interleaved (0x1) samples are interleaved on
//             rising and falling edges.
//  dmode[1]:  bit-interleaved (0x0) samples are interleaved on
//             lower and upper bits of the same clock edge.
//
//  dmode[0]:  rising-edge-first (0x1), samples are interleaved
//             rising edge first and then falling edge.
//  dmode[0]:  falling-edge-first (0x0), samples are interleaved
//             falling edge first and then rising edge.
// ---------------------------------------------------------------------------
// 0x07   0x1c   [17:17]  delay_sel             delay select (0->1)
//               [16:16]  delay_rwn             delay read (0x1) or write(0x0)
//               [11: 8]  delay_wdata           delay write address[3:0]
//               [ 4: 0]  delay_wdata           delay write data[4:0]
//
// A zero to one transition on delay_sel triggers delay read or write.
// Address 0x8 is "OR" delay, addresses 0x7 to 0x0 are for data bits 7 downto 0.
// ---------------------------------------------------------------------------
// 0x08   0x20   [ 8: 8]  delay_locked          delay locked (RO)
//               [ 4: 0]  delay_rdata           delay read data[4:0] (RO)
// ---------------------------------------------------------------------------
// 0x09   0x24   [ 0: 0]  adc_pntype            PN9 (0x0) or PN23 (0x1)
// ---------------------------------------------------------------------------
// 0x0a   0x28   [ 0: 0]  adc_datasel           Rising (0x0) or Falling (0x1) edge first
//
// This register controls the data select from DDR. The incoming data word's bytes
// are assumed to be rising edge first. That is first byte appears on the rising edge
// followed by second byte on the falling edge.
// ---------------------------------------------------------------------------
// ***************************************************************************
// ***************************************************************************
